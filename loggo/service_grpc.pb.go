// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: loggo/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoggoClient is the client API for Loggo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggoClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Loggo_StreamClient, error)
}

type loggoClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggoClient(cc grpc.ClientConnInterface) LoggoClient {
	return &loggoClient{cc}
}

func (c *loggoClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Loggo_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Loggo_ServiceDesc.Streams[0], "/loggo.Loggo/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Loggo_StreamClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type loggoStreamClient struct {
	grpc.ClientStream
}

func (x *loggoStreamClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggoServer is the server API for Loggo service.
// All implementations must embed UnimplementedLoggoServer
// for forward compatibility
type LoggoServer interface {
	Stream(*StreamRequest, Loggo_StreamServer) error
	mustEmbedUnimplementedLoggoServer()
}

// UnimplementedLoggoServer must be embedded to have forward compatible implementations.
type UnimplementedLoggoServer struct {
}

func (UnimplementedLoggoServer) Stream(*StreamRequest, Loggo_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedLoggoServer) mustEmbedUnimplementedLoggoServer() {}

// UnsafeLoggoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggoServer will
// result in compilation errors.
type UnsafeLoggoServer interface {
	mustEmbedUnimplementedLoggoServer()
}

func RegisterLoggoServer(s grpc.ServiceRegistrar, srv LoggoServer) {
	s.RegisterService(&Loggo_ServiceDesc, srv)
}

func _Loggo_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggoServer).Stream(m, &loggoStreamServer{stream})
}

type Loggo_StreamServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type loggoStreamServer struct {
	grpc.ServerStream
}

func (x *loggoStreamServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

// Loggo_ServiceDesc is the grpc.ServiceDesc for Loggo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loggo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loggo.Loggo",
	HandlerType: (*LoggoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Loggo_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "loggo/service.proto",
}
